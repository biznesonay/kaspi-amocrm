/**
 * Helper —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Kaspi API
 * –ó–∞–ø—É—Å–∫: node src/helpers/test-kaspi-api.js
 */

import axios from 'axios';
import { config } from '../config/env.js';
import { logger } from '../utils/logger.js';

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Kaspi API\n');
console.log('=========================================\n');

// –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã Kaspi API endpoints
const POSSIBLE_ENDPOINTS = [
  'https://kaspi.kz/shop/api/v2',
  'https://kaspi.kz/merchantcabinet/api/v1',
  'https://api.kaspi.kz/v1',
  'https://kaspi.kz/shop/api',
  'https://merchantcabinet.kaspi.kz/api/v1'
];

async function testKaspiEndpoint(baseUrl) {
  console.log(`\nüì° –¢–µ—Å—Ç–∏—Ä—É—é: ${baseUrl}`);
  console.log('-'.repeat(50));
  
  // –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
  const orderPaths = [
    '/orders',
    '/order/list',
    '/merchants/orders',
    '/api/orders',
    '/v1/orders'
  ];

  for (const path of orderPaths) {
    try {
      const fullUrl = `${baseUrl}${path}`;
      console.log(`  –ü—Ä–æ–±—É—é: ${fullUrl}`);
      
      const response = await axios({
        method: 'GET',
        url: fullUrl,
        headers: {
          'Authorization': `Bearer ${config.kaspi.apiToken}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-API-KEY': config.kaspi.apiToken, // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        },
        params: {
          'page[number]': 0,
          'page[size]': 1,
          'filter[state]': 'NEW',
          'filter[status]': 'NEW', // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        },
        timeout: 10000,
        validateStatus: () => true // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
      });

      console.log(`    –°—Ç–∞—Ç—É—Å: ${response.status}`);
      
      if (response.status === 200) {
        console.log(`    ‚úÖ –£–°–ü–ï–•! –≠—Ç–æ —Ä–∞–±–æ—á–∏–π endpoint!`);
        console.log(`    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        const data = response.data;
        console.log(`      - –¢–∏–ø: ${typeof data}`);
        
        if (data && typeof data === 'object') {
          const keys = Object.keys(data);
          console.log(`      - –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${keys.join(', ')}`);
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö
          if (data.data && Array.isArray(data.data)) {
            console.log(`      - –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${data.data.length}`);
            if (data.data.length > 0) {
              console.log(`      - –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–∫–∞–∑–∞:`);
              const order = data.data[0];
              showObjectStructure(order, '        ');
            }
          } else if (data.orders && Array.isArray(data.orders)) {
            console.log(`      - –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${data.orders.length}`);
            if (data.orders.length > 0) {
              console.log(`      - –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–∫–∞–∑–∞:`);
              const order = data.orders[0];
              showObjectStructure(order, '        ');
            }
          } else if (data.items && Array.isArray(data.items)) {
            console.log(`      - –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${data.items.length}`);
            if (data.items.length > 0) {
              console.log(`      - –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–∫–∞–∑–∞:`);
              const order = data.items[0];
              showObjectStructure(order, '        ');
            }
          }
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
          if (data.meta || data.pagination || data.links) {
            console.log(`      - –ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏`);
          }
        }
        
        return { success: true, endpoint: fullUrl, data: response.data };
        
      } else if (response.status === 401) {
        console.log(`    ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)`);
        console.log(`       –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
        console.log(`       - –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω`);
        console.log(`       - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
        console.log(`       - –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫`);
        
      } else if (response.status === 403) {
        console.log(`    ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)`);
        console.log(`       –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ endpoint`);
        
      } else if (response.status === 404) {
        console.log(`    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω (404)`);
        
      } else if (response.status >= 500) {
        console.log(`    ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status})`);
        
      } else {
        console.log(`    ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        if (response.data) {
          console.log(`       –û—Ç–≤–µ—Ç: ${JSON.stringify(response.data).substring(0, 200)}`);
        }
      }
      
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        console.log(`    ‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ`);
      } else if (error.code === 'ETIMEDOUT') {
        console.log(`    ‚ùå –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è`);
      } else if (error.code === 'ENOTFOUND') {
        console.log(`    ‚ùå –•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      } else {
        console.log(`    ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }
}

function showObjectStructure(obj, indent = '') {
  const keys = Object.keys(obj);
  for (const key of keys.slice(0, 10)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π
    const value = obj[key];
    const type = Array.isArray(value) ? 'array' : typeof value;
    
    if (value === null) {
      console.log(`${indent}- ${key}: null`);
    } else if (type === 'object') {
      console.log(`${indent}- ${key}: {–æ–±—ä–µ–∫—Ç}`);
      if (key === 'buyer' || key === 'customer') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        showObjectStructure(value, indent + '  ');
      }
    } else if (type === 'array') {
      console.log(`${indent}- ${key}: [–º–∞—Å—Å–∏–≤, –¥–ª–∏–Ω–∞: ${value.length}]`);
      if (value.length > 0 && key === 'items') {
        console.log(`${indent}  –ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞:`);
        showObjectStructure(value[0], indent + '    ');
      }
    } else {
      const displayValue = type === 'string' ? `"${value.substring(0, 50)}..."` : value;
      console.log(`${indent}- ${key}: ${displayValue} (${type})`);
    }
  }
  
  if (keys.length > 10) {
    console.log(`${indent}... –∏ –µ—â–µ ${keys.length - 10} –ø–æ–ª–µ–π`);
  }
}

async function testCurrentConfig() {
  console.log('\nüìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env:');
  console.log('=========================================');
  
  // –ü–æ–ª—É—á–∞–µ–º base URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const currentBaseUrl = process.env.KASPI_BASE_URL || 'https://kaspi.kz/shop/api/v2';
  console.log(`Base URL: ${currentBaseUrl}`);
  console.log(`API Token: ${config.kaspi.apiToken ? '***' + config.kaspi.apiToken.slice(-4) : '–ù–ï –ó–ê–î–ê–ù'}`);
  
  if (!config.kaspi.apiToken) {
    console.log('\n‚ùå KASPI_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env!');
    console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    return null;
  }
  
  const result = await testKaspiEndpoint(currentBaseUrl);
  return result;
}

async function findWorkingEndpoint() {
  console.log('\nüîé –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ endpoint:');
  console.log('=========================================');
  
  for (const endpoint of POSSIBLE_ENDPOINTS) {
    const result = await testKaspiEndpoint(endpoint);
    if (result && result.success) {
      return result;
    }
  }
  
  return null;
}

async function main() {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const currentResult = await testCurrentConfig();
    
    if (currentResult && currentResult.success) {
      console.log('\n‚úÖ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: KASPI_BASE_URL=${currentResult.endpoint.split('/orders')[0]}`);
    } else {
      console.log('\n‚ö†Ô∏è –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
      console.log('–ò—â—É —Ä–∞–±–æ—á–∏–π endpoint...');
      
      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π endpoint
      const workingResult = await findWorkingEndpoint();
      
      if (workingResult && workingResult.success) {
        console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π endpoint!');
        console.log('=========================================');
        console.log('–î–æ–±–∞–≤—å—Ç–µ –≤ .env:');
        console.log(`KASPI_BASE_URL=${workingResult.endpoint.split('/orders')[0]}`);
        console.log('=========================================');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        const fs = await import('fs/promises');
        const examplePath = './kaspi-response-example.json';
        await fs.writeFile(
          examplePath, 
          JSON.stringify(workingResult.data, null, 2)
        );
        console.log(`\n–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${examplePath}`);
        
      } else {
        console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π endpoint.');
        console.log('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('1. –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω');
        console.log('2. –¢–æ–∫–µ–Ω –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        console.log('3. –£ —Ç–æ–∫–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
        console.log('4. API endpoint –∏–∑–º–µ–Ω–∏–ª—Å—è');
        console.log('\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Kaspi');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤');
        console.log('3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Kaspi –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API');
      }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log('=========================================');
    console.log('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Kaspi API:');
    console.log('1. –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Base URL');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    console.log('   (Bearer token, X-API-KEY, –∏–ª–∏ –¥—Ä—É–≥–æ–π)');
    console.log('3. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
    console.log('   (state/status, filter[]/–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏');
    console.log('   (page[number]/page/offset)');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    logger.error({ error: error.message }, 'Kaspi API test failed');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main().then(() => {
  console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
});