#!/usr/bin/env node

import config from './config/env.js';
import logger from './utils/logger.js';
import repository from './db/repository.js';
import alertService from './utils/alerts.js';
import kaspiService from './services/kaspi.js';
import amoCRMService from './services/amocrm.js';
import phoneService from './services/phone.js';
import { checkDatabaseConnection } from './config/database.js';

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤–µ—Ä–∫–∏
const stats = {
  ordersChecked: 0,
  ordersCreated: 0,
  ordersUpdated: 0,
  ordersFailed: 0,
  startTime: Date.now()
};

function resetStats() {
  stats.ordersChecked = 0;
  stats.ordersCreated = 0;
  stats.ordersUpdated = 0;
  stats.ordersFailed = 0;
  stats.startTime = Date.now();
}

export async function fetchUpdatedKaspiOrders(fromDate, params = {}) {
  const kaspiOrders = [];
  let page = 1;
  let hasMore = true;
  let totalCountLogged = false;

  while (hasMore) {
    const ordersResponse = await kaspiService.getOrdersUpdatedAfter(fromDate, {
      ...params,
      page
    });

    const pageOrders = ordersResponse.data || [];

    if (!totalCountLogged) {
      const totalCount = ordersResponse.meta?.totalCount ?? pageOrders.length;
      logger.info({ ordersCount: totalCount }, '–ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ Kaspi');
      totalCountLogged = true;
    }

    if (pageOrders.length === 0) {
      break;
    }

    kaspiOrders.push(...pageOrders);

    if (ordersResponse.meta) {
      const { totalPages = 1 } = ordersResponse.meta;
      hasMore = page < totalPages;
    } else {
      hasMore = pageOrders.length === config.KASPI_PAGE_SIZE;
    }

    page++;

    if (page > 100) {
      logger.warn('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (100) –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Kaspi');
      break;
    }
  }

  return kaspiOrders;
}

/**
 * –°–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∑–∞–∫–∞–∑
 */
export async function reconcileOrder(kaspiOrder, processedOrder) {
  const orderCode = kaspiOrder.code;
  
  try {
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
    const newChecksum = kaspiService.calculateChecksum(kaspiOrder);
    
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ amoCRM (–±—ã–ª–∞ –æ—à–∏–±–∫–∞), —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!processedOrder || !processedOrder.amocrm_lead_id) {
      logger.info({ orderCode }, '–ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ amoCRM, —Å–æ–∑–¥–∞–µ–º');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      const phone = phoneService.extractPhoneFromBuyer(kaspiOrder.buyer);
      if (!phone) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è');
      }
      
      const contactName = phoneService.generateContactName(kaspiOrder.buyer);
      
      // –í DRY_RUN —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
      if (config.DRY_RUN) {
        logger.info({
          orderCode,
          contactName,
          phone: phoneService.maskPhone(phone),
          totalPrice: kaspiOrder.totalPrice
        }, '[DRY_RUN] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
        
        stats.ordersCreated++;
        return;
      }
      
      // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
      let contact = await amoCRMService.findContactByPhone(phone);
      if (!contact) {
        contact = await amoCRMService.createContact({ name: contactName, phone });
      }
      
      // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
      const leadName = `Kaspi #${orderCode} ‚Äî ${contactName}`;
      const itemsText = kaspiService.formatItemsForNote(kaspiOrder.items);
      const noteText = config.NOTE_TEMPLATE
        .replace('{{items}}', itemsText)
        .replace('{{total}}', kaspiOrder.totalPrice);
      
      const lead = await amoCRMService.createLeadComplex({
        name: leadName,
        price: kaspiOrder.totalPrice,
        contactId: contact.id,
        items: kaspiOrder.items || [],
        noteText,
        tags: ['kaspi', kaspiOrder.state.toLowerCase(), 'reconciled']
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      await repository.saveProcessedOrder({
        orderCode,
        leadId: lead.id,
        kaspiState: kaspiOrder.state,
        checksum: newChecksum,
        processingTimeMs: 0,
        retryCount: processedOrder?.retry_count || 0
      });

      await repository.updateOrderStats({
        success: true,
        amount: Number(kaspiOrder.totalPrice) || 0,
        reconcileUpdate: true,
        leadCreated: true
      });

      logger.info({ orderCode, leadId: lead.id }, '‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ');
      stats.ordersCreated++;
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    if (processedOrder.checksum === newChecksum) {
      logger.debug({ orderCode }, '–ó–∞–∫–∞–∑ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    logger.info({ 
      orderCode, 
      oldChecksum: processedOrder.checksum,
      newChecksum 
    }, '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ');
    
    // –í DRY_RUN —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
    if (config.DRY_RUN) {
      logger.info({
        orderCode,
        leadId: processedOrder.amocrm_lead_id,
        oldPrice: processedOrder.total_price,
        newPrice: kaspiOrder.totalPrice
      }, '[DRY_RUN] –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞–∫–∞–∑');
      
      stats.ordersUpdated++;
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ amoCRM
    const leadId = processedOrder.amocrm_lead_id;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    await amoCRMService.updateLead(leadId, {
      price: Math.round(kaspiOrder.totalPrice)
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    if (kaspiOrder.items && kaspiOrder.items.length > 0) {
      await amoCRMService.updateLeadProducts(leadId, kaspiOrder.items);

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      const itemsText = kaspiService.formatItemsForNote(kaspiOrder.items);
      const updateNote = `üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ ${new Date().toLocaleString('ru-RU', { timeZone: config.TIMEZONE })}\n` +
                        `–ù–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤: ${itemsText}\n` +
                        `–ù–æ–≤–∞—è —Å—É–º–º–∞: ${kaspiOrder.totalPrice} —Ç–≥`;
      
      await amoCRMService.addNoteToLead(leadId, updateNote);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    await repository.saveProcessedOrder({
      orderCode,
      leadId,
      kaspiState: kaspiOrder.state,
      checksum: newChecksum,
      processingTimeMs: 0,
      retryCount: 0
    });

    await repository.updateOrderStats({
      success: true,
      amount: Number(kaspiOrder.totalPrice) || 0,
      reconcileUpdate: true
    });

    logger.info({ orderCode, leadId }, '‚úÖ –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ');
    stats.ordersUpdated++;

  } catch (error) {
    logger.error({
      orderCode,
      error: error.message
    }, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞');

    stats.ordersFailed++;

    if (!config.DRY_RUN) {
      await repository.updateOrderStats({
        success: false,
        amount: 0,
        reconcileUpdate: false
      });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
    await repository.logError('RECONCILE_ERROR', error.message, {
      orderCode,
      processedOrder
    });
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–≤–µ—Ä–∫–∏
 */
async function reconcile() {
  const runId = logger.startOperation('reconcile');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const dbConnected = await checkDatabaseConnection();
    if (!dbConnected) {
      throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ª–æ–∫
    const lockAcquired = await repository.acquireLock('reconcile', 15);
    if (!lockAcquired) {
      logger.info('–î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–µ—Ä–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    resetStats();

    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—Ä–∫–∏
    const watermark = await repository.getReconcileWatermark();

    // –î–æ–±–∞–≤–ª—è–µ–º 2-—á–∞—Å–æ–≤–æ–π –±—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const fromDate = new Date(watermark.getTime() - 2 * 60 * 60 * 1000);
    
    logger.info({ 
      watermark,
      fromDate,
      dryRun: config.DRY_RUN
    }, 'üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é —Å–≤–µ—Ä–∫—É');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ Kaspi
    const kaspiOrders = await fetchUpdatedKaspiOrders(fromDate, {
      state: config.KASPI_ALLOWED_STATES_ARRAY
    });

    if (kaspiOrders.length === 0) {
      logger.info('–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–≤–µ—Ä–∫–∏');
      await repository.updateReconcileWatermark(new Date());
      await repository.releaseLock('reconcile');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –ë–î –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const processedOrdersMap = {};
    for (const kaspiOrder of kaspiOrders) {
      const processed = await repository.getProcessedOrder(kaspiOrder.code);
      if (processed) {
        processedOrdersMap[kaspiOrder.code] = processed;
      }
      stats.ordersChecked++;
    }
    
    // –°–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
    for (const kaspiOrder of kaspiOrders) {
      const processedOrder = processedOrdersMap[kaspiOrder.code];
      await reconcileOrder(kaspiOrder, processedOrder);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
    const maxUpdatedAt = kaspiOrders.reduce((max, order) => {
      const updatedAt = new Date(order.updatedAt || order.createdAt);
      return updatedAt > max ? updatedAt : max;
    }, watermark);

    await repository.updateReconcileWatermark(maxUpdatedAt);

    if (!config.DRY_RUN) {
      const totalProcessed = parseInt(await repository.getMeta('total_orders_processed') || '0');
      const totalFailed = parseInt(await repository.getMeta('total_orders_failed') || '0');

      await repository.setMeta('total_orders_processed',
        totalProcessed + stats.ordersCreated + stats.ordersUpdated);
      await repository.setMeta('total_orders_failed', totalFailed + stats.ordersFailed);
    }

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ª–æ–∫
    await repository.releaseLock('reconcile');
    
    const duration = Date.now() - stats.startTime;
    logger.endOperation('reconcile', runId, {
      duration,
      checked: stats.ordersChecked,
      created: stats.ordersCreated,
      updated: stats.ordersUpdated,
      failed: stats.ordersFailed
    });
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info({
      checked: stats.ordersChecked,
      created: stats.ordersCreated,
      updated: stats.ordersUpdated,
      failed: stats.ordersFailed,
      durationSec: Math.round(duration / 1000),
      newWatermark: maxUpdatedAt
    }, '‚úÖ –°–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –ï—Å–ª–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–∫–∞–∑—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç
    if (stats.ordersCreated > 0 || stats.ordersUpdated > 0) {
      await alertService.sendInfoAlert(
        '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–µ—Ä–∫–∏',
        `–°–æ–∑–¥–∞–Ω–æ: ${stats.ordersCreated}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${stats.ordersUpdated}`,
        stats
      );
    }
    
  } catch (error) {
    logger.operationError('reconcile', error, { runId });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    await repository.logError('RECONCILE_CRITICAL', error.message, {
      runId,
      stats
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç
    await alertService.sendCriticalAlert(
      '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–≤–µ—Ä–∫–∏',
      error.message,
      { runId, stats }
    );
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ª–æ–∫ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await repository.releaseLock('reconcile');
    
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', async () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await repository.releaseLock('reconcile');
  process.exit(0);
});

process.on('SIGINT', async () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await repository.releaseLock('reconcile');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º
if (import.meta.url === `file://${process.argv[1]}`) {
  reconcile()
    .then(() => {
      process.exit(0);
    })
    .catch((error) => {
      logger.fatal({ error: error.message, stack: error.stack }, '–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞');
      process.exit(1);
    });
}