#!/usr/bin/env node

import config from './config/env.js';
import logger from './utils/logger.js';
import repository from './db/repository.js';
import alertService from './utils/alerts.js';
import kaspiService from './services/kaspi.js';
import amoCRMService from './services/amocrm.js';
import phoneService from './services/phone.js';
import { checkDatabaseConnection } from './config/database.js';

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞
const stats = {
  ordersProcessed: 0,
  ordersFailed: 0,
  ordersSkipped: 0,
  totalAmount: 0,
  processingTimes: [],
  errors: [],
  startTime: Date.now()
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –∏–∑ Kaspi
 */
async function processOrder(order) {
  const startTime = Date.now();
  const orderCode = order.code;
  let existingOrder = null;
  let previousRetryCount = 0;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑
    existingOrder = await repository.getProcessedOrder(orderCode);
      const isAlreadySuccessful = existingOrder?.processed_successfully ?? (Boolean(existingOrder?.amocrm_lead_id) && !existingOrder?.last_error);
    if (isAlreadySuccessful) {
      logger.debug({ orderCode, leadId: existingOrder.amocrm_lead_id }, '–ó–∞–∫–∞–∑ —É–∂–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      stats.ordersSkipped++;
      return;
    }

    if (existingOrder) {
      previousRetryCount = Number(existingOrder.retry_count || 0);
      if (existingOrder.last_error) {
        logger.info({
          orderCode,
          retryCount: previousRetryCount,
          lastError: existingOrder.last_error
        }, '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
      } else {
        logger.debug({ orderCode, retryCount: previousRetryCount }, '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞');
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    const phone = phoneService.extractPhoneFromBuyer(order.buyer);
    if (!phone) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è');
    }
    
    const contactName = phoneService.generateContactName(order.buyer);
    
    // –í DRY_RUN —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
    if (config.DRY_RUN) {
      logger.info({
        orderCode,
        contactName,
        phone: phoneService.maskPhone(phone),
        totalPrice: order.totalPrice,
        itemsCount: order.items?.length || 0
      }, '[DRY_RUN] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑');
      
      stats.ordersProcessed++;
      stats.totalAmount += order.totalPrice;
      return;
    }
    
    // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    let contact = await amoCRMService.findContactByPhone(phone);
    if (!contact) {
      logger.info({ phone: phoneService.maskPhone(phone), name: contactName }, '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
      contact = await amoCRMService.createContact({ name: contactName, phone });
    } else {
      logger.debug({ contactId: contact.id, phone: phoneService.maskPhone(phone) }, '–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç');
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–¥–µ–ª–∫–∏
    const leadName = `Kaspi #${orderCode} ‚Äî ${contactName}`;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
    const itemsText = kaspiService.formatItemsForNote(order.items);
    const noteText = config.NOTE_TEMPLATE
      .replace('{{items}}', itemsText)
      .replace('{{total}}', order.totalPrice);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è (–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç.–¥.)
    const customFields = {};
    const deliveryAddress = kaspiService.extractDeliveryAddress(order);
    if (deliveryAddress) {
      // TODO: –î–æ–±–∞–≤–∏—Ç—å field_code –¥–ª—è –∞–¥—Ä–µ—Å–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      // customFields.DELIVERY_ADDRESS = deliveryAddress;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –∑–∞–º–µ—Ç–∫–æ–π
    const lead = await amoCRMService.createLeadComplex({
      name: leadName,
      price: order.totalPrice,
      contactId: contact.id,
      items: order.items || [],
      noteText,
      customFields,
      tags: ['kaspi', order.state.toLowerCase()]
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—Ä–∫–∏
    const checksum = kaspiService.calculateChecksum(order);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    const processingTime = Date.now() - startTime;
    await repository.saveProcessedOrder({
      orderCode,
      leadId: lead.id,
      kaspiState: order.state,
      checksum,
      processingTimeMs: processingTime,
      retryCount: 0
    });
    
    logger.info({
      orderCode,
      leadId: lead.id,
      contactId: contact.id,
      processingTimeMs: processingTime
    }, '‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    
    stats.ordersProcessed++;
    stats.totalAmount += order.totalPrice;
    stats.processingTimes.push(processingTime);
    
  } catch (error) {
    const processingTime = Date.now() - startTime;
    
    logger.error({
      orderCode,
      error: error.message,
      processingTimeMs: processingTime
    }, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    await repository.saveProcessedOrder({
      orderCode,
      leadId: null,
      kaspiState: order.state,
      checksum: kaspiService.calculateChecksum(order),
      processingTimeMs: processingTime,
      retryCount: previousRetryCount + 1,
      lastError: error.message
    });
    
    stats.ordersFailed++;
    stats.errors.push({ orderCode, error: error.message });
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–æ—Å–∞
 */
async function pollAndCreate() {
  const runId = logger.startOperation('poll-and-create');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const dbConnected = await checkDatabaseConnection();
    if (!dbConnected) {
      throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ª–æ–∫
    const lockAcquired = await repository.acquireLock('poll', 5);
    if (!lockAcquired) {
      logger.info('–î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–æ—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    logger.info({ 
      dryRun: config.DRY_RUN,
      allowedStates: config.KASPI_ALLOWED_STATES_ARRAY
    }, 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å Kaspi');
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ Kaspi
    const ordersResponse = await kaspiService.getOrders({
      state: config.KASPI_ALLOWED_STATES_ARRAY,
      sort: 'createdAt:desc'
    });
    
    const orders = ordersResponse.data || [];
    logger.info({ ordersCount: orders.length }, '–ü–æ–ª—É—á–µ–Ω—ã –∑–∞–∫–∞–∑—ã –∏–∑ Kaspi');
    
    if (orders.length === 0) {
      logger.info('–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      await repository.releaseLock('poll');
      await repository.updateHeartbeat();
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (—á—Ç–æ–±—ã —Å–æ–±–ª—é–¥–∞—Ç—å rate limit)
    for (const order of orders) {
      await processOrder(order);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
    const avgProcessingTime = stats.processingTimes.length > 0
      ? Math.round(stats.processingTimes.reduce((a, b) => a + b, 0) / stats.processingTimes.length)
      : 0;
    
    await repository.updateDailyStats(new Date(), {
      ordersProcessed: stats.ordersProcessed,
      ordersFailed: stats.ordersFailed,
      totalAmount: stats.totalAmount,
      avgProcessingTimeMs: avgProcessingTime
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const totalProcessed = parseInt(await repository.getMeta('total_orders_processed') || '0');
    const totalFailed = parseInt(await repository.getMeta('total_orders_failed') || '0');
    
    await repository.setMeta('total_orders_processed', totalProcessed + stats.ordersProcessed);
    await repository.setMeta('total_orders_failed', totalFailed + stats.ordersFailed);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    const backlog = orders.length - stats.ordersProcessed - stats.ordersSkipped;
    if (backlog >= config.ALERT_BACKLOG_THRESHOLD) {
      await alertService.sendWarningAlert(
        '–ë–æ–ª—å—à–æ–π backlog –∑–∞–∫–∞–∑–æ–≤',
        `${backlog} –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ`,
        { backlog, threshold: config.ALERT_BACKLOG_THRESHOLD }
      );
    }
    
    // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    await repository.resetFailures();
    await repository.updateHeartbeat();
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ª–æ–∫
    await repository.releaseLock('poll');
    
    const duration = Date.now() - stats.startTime;
    logger.endOperation('poll-and-create', runId, {
      duration,
      processed: stats.ordersProcessed,
      failed: stats.ordersFailed,
      skipped: stats.ordersSkipped,
      totalAmount: stats.totalAmount,
      avgProcessingTime
    });
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info({
      processed: stats.ordersProcessed,
      failed: stats.ordersFailed,
      skipped: stats.ordersSkipped,
      totalAmount: stats.totalAmount,
      durationSec: Math.round(duration / 1000)
    }, '‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    logger.operationError('poll-and-create', error, { runId });
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    const failures = await repository.incrementFailures();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    await repository.logError('POLL_ERROR', error.message, {
      runId,
      stats
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
    if (failures >= config.ALERT_FAIL_STREAK) {
      await alertService.sendCriticalAlert(
        '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞',
        error.message,
        { failures, runId }
      );
    }
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ª–æ–∫ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await repository.releaseLock('poll');
    
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', async () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await repository.releaseLock('poll');
  process.exit(0);
});

process.on('SIGINT', async () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await repository.releaseLock('poll');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º
if (import.meta.url === `file://${process.argv[1]}`) {
  pollAndCreate()
    .then(() => {
      process.exit(0);
    })
    .catch((error) => {
      logger.fatal({ error: error.message, stack: error.stack }, '–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞');
      process.exit(1);
    });
}